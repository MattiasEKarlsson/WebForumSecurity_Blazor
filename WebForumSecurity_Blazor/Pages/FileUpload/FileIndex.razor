@page "/files"
@*@using Microsoft.Extensions.Logging
@using WebForumSecurity_Blazor.Models
@inject IFileHandler FileHandler *@

@using System 
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Web
@using WebForumSecurity_Blazor.Models
@using WebForumSecurity_Blazor.Utilitys
@inject IFileHandler FileHandler
@inject IWebHostEnvironment Environment
@inject IJSRuntime JS

<h3>Upload Files</h3>
<p>
    <label>
        
        <InputFile OnChange="@LoadFiles"/>
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.UntrustedName</li>
                    <li>Last modified: @file.TimeStamp.ToString()</li>
                    <li>Content type: @file.Data</li>
                    
                </ul>
            </li>
        }
    </ul>
}



<table class="table">
    <thead>
        <tr>
            <th>
                TimeStamp
            </th>
            <th>
                Name
            </th>
            <th>
                Size
            </th>            
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var file in Files) {
        <tr>
            <td>
                @file.TimeStamp
            </td>
            <td>
                @file.UntrustedName
            </td>
            <td>
                @file.Size
            </td>            
            <td>     
                 <button @onclick="()=>DownloadFileFromStream(file.Id)" class="btn btn-primary" >Download</button>
                 <button @onclick="()=>Delete(file.Id)" class="btn btn-danger">Delete</button>
            </td>
        </tr>
}
    </tbody>
</table>

@code {
    private List<ApplicationFile> loadedFiles = new();
    private IEnumerable<ApplicationFile> Files { get; set; } = new List<ApplicationFile>();
    private ApplicationFile selectedFile = new ApplicationFile();
    private long maxFileSize = 10 * 1048576;
    private int maxAllowedFiles = 1;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        Files = await FileHandler.GetAllFiles();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var fileformat = "image/png";
        //get file
        var imageFile = await e.File.RequestImageFileAsync(fileformat, 250, 250);
        //Convert to byte array
        var buffer = new byte[imageFile.Size];
        await imageFile.OpenReadStream().ReadAsync(buffer);
        //Package File
        selectedFile.Id = new Guid();
        selectedFile.TimeStamp = DateTime.Now;
        selectedFile.UntrustedName = e.File.Name;
        selectedFile.Size = e.File.Size;
        selectedFile.Data = buffer;

        await FileHandler.UploadFile(selectedFile);
        NavManager.NavigateTo("files", true);
    }


    private Stream GetFileStream(byte[] filebyte)
    {
        var fileStream = new MemoryStream(filebyte);
        return fileStream;
    }

    private async Task DownloadFileFromStream(Guid id)
    {
        var applicationFile = await FileHandler.DownloadFile(id);
        var fileStream = GetFileStream(applicationFile.Data);
        var fileName = applicationFile.UntrustedName;

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task Delete(Guid id)
    {
        await FileHandler.Delete(id);
        NavManager.NavigateTo("files", true);
    }
}



