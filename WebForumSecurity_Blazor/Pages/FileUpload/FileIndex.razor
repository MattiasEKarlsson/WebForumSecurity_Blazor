@page "/files"

@using System 
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Web
@using WebForumSecurity_Blazor.Models
@using System.Net.Http
@using WebForumSecurity_Blazor.Verify
@using static System.Net.Mime.MediaTypeNames
@inject IFileHandler FileHandler
@inject IWebHostEnvironment Environment
@inject IJSRuntime JS


<div class="container">
    <div class="file-input-zone rounded"><InputFile OnChange="UploadFile" />Upload a File</div>
    <h5 class="text-danger">@Message</h5>
</div>
<div class="container row">
    @foreach (var file in Files) {
       
       <div class="card m-2 asa " style="width: 18rem;">
           <img src="data:image/png;base64,@Convert.ToBase64String(file.Data, 0, file.Data.Length)" class="card-img-top pt-2 asa" alt="...">
           <div class="d-flex justify-content-center">
            <p>Uploaded:</p>
            <p>@file.TimeStamp</p>
        </div>
        <div class="d-flex justify-content-center">
            <p>Size:</p>
            <p>@file.Size</p>
        </div>  
        <div class="card-body">
           <button @onclick="()=>DownloadFileFromStream(file.Id)" class="btn btn-primary">Download</button>
           <button @onclick="()=>Delete(file.Id)" class="btn btn-danger">Delete</button>
        </div>
      </div>
}
</div>


@code {
    private ApplicationFile selectedFile = new ApplicationFile();
    private byte[]? FileUploaded;
    private IEnumerable<ApplicationFile> Files { get; set; } = new List<ApplicationFile>();

    private long maxFileSize = 209715200;
    private string[] permittedExtensions = { ".txt", ".jpg", ".png"};
    private string? Message;
    private FileHelpers helper = new FileHelpers();


    protected override async Task OnInitializedAsync()
    {
        Files = await FileHandler.GetAllFiles();
    }

    private async Task DownloadFileFromStream(Guid id)
    {
        var applicationFile = await FileHandler.DownloadFile(id);
        var fileStream = GetFileStream(applicationFile.Data);
        var fileName = applicationFile.UntrustedName;

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private Stream GetFileStream(byte[] filebyte)
    {
        var fileStream = new MemoryStream(filebyte);
        return fileStream;
    }

    private async Task Delete(Guid id)
    {
        await FileHandler.Delete(id);
        await OnInitializedAsync();
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream(maxFileSize).CopyToAsync(ms);
        var file = e.File;
        var bytes = ms.ToArray();

        if (file != null)
        {
            var ext = Path.GetExtension(file.Name).ToLowerInvariant();

            if (file.Size < maxFileSize && permittedExtensions.Contains(ext))
            {
                FileUploaded = ms.ToArray();
                Stream stream = new MemoryStream(FileUploaded);
                if (helper.CheckIfValid(stream, ext))
                {
                    selectedFile.Id = new Guid();
                    selectedFile.UntrustedName = helper.ChangeName(file.Name);
                    selectedFile.TimeStamp = DateTime.Now;
                    selectedFile.Size = file.Size;
                    selectedFile.Data = FileUploaded;
                    await FileHandler.UploadFile(selectedFile);
                    await OnInitializedAsync();
                    Message = ""; 
                }
                else
                {
                    Message = "Invalid File Format"; 
                }

            }
            else
            {
                Message = "Invalid File Size or Format";
            }
        }
    }
   

    




    

   

       


}



